{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGifs","gif","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"4LAqBeA,EAnBK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAClB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KASA,OACI,sBAAMC,SANW,SAACC,GAClBA,EAAEC,iBACFN,EAAY,CAACE,IACbC,EAAc,KAGd,SACI,uBAAOI,KAAK,OAAOC,MAAON,EAAYO,SAVpB,SAACJ,GACvBF,EAAcE,EAAEK,OAAOF,a,8BCLlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,gEAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARtB,kBAWZM,GAXY,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACtB,ECHwB,SAACA,GACzB,MAA0BX,mBAAS,CAC/BkB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OAVAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAACd,GACpBe,YAAW,WACPH,EAAS,CACLf,KAAMG,EACNU,SAAS,MAEd,WAER,CAACpB,IACGqB,EDZgBK,CAAa1B,GAA7BO,EAAP,EAAOA,KAAKa,EAAZ,EAAYA,QAMZ,OAEI,qCACI,6BAAKpB,IACJoB,GAAW,2CAEfb,EAAKE,KAAI,SAACkB,GAAD,OACN,cAAC,EAAD,eAEQA,GADCA,EAAIhB,WEEViB,EAnBM,WAEjB,MAAgCvC,mBAAS,IAAzC,mBAAOW,EAAP,KAAiBZ,EAAjB,KAIA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,YAAaA,IAC1B,uBACA,6BACKY,EAASS,KAAI,SAACT,GAAD,OACV,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCVlC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3f3fdd28.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst AddCategory = ({setCategory}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setCategory([inputValue])\r\n        setInputValue('');\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type='text' value={inputValue} onChange={handleInputChange} />\r\n        </form>\r\n    );\r\n};\r\nAddCategory.propTypes= {\r\n    setCategory: PropTypes.func.isRequired\r\n}\r\nexport default AddCategory;\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}z&limit=10&api_key=kjJUBIwR2m3nsjmzln1iYMcEPk2VMdsK`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n        };\r\n    });\r\n    return gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <div className='card'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const {data,loading} = useFetchGifs(category);\r\n    // const [images, setImages] = useState([]);\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //         .then(setImages)\r\n    // }, [category]);\r\n    return (\r\n\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p>loading...</p>}\r\n        \r\n        {data.map((gif) => \r\n            <GifGridItem\r\n                key={gif.id}\r\n                {...gif}\r\n            />\r\n        )}\r\n        </>\r\n    );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n    useEffect(() => {\r\n        getGifs(category).then((img) => {\r\n            setTimeout(() => {\r\n                setstate({\r\n                    data: img,\r\n                    loading: false,\r\n                });\r\n            }, 1500);\r\n        });\r\n    }, [category]);\r\n    return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nconst GifExpertApp = () => {\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [category, setCategory] = useState([]);\r\n    // const addCategory = () => {\r\n    //     setCategory((cats) => [...cats, 'Hunter x Hunter']);\r\n    // };\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategory={setCategory} />\r\n            <hr />\r\n            <ul>\r\n                {category.map((category) => (\r\n                    <GifGrid key={category} category={category} />\r\n                ))}\r\n            </ul>\r\n        </>\r\n    );\r\n};\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}